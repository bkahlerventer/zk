package zk.zookeeper

import enumeratum.values._

/**
  * This trait specifies the public interface an event handler class must
  * implement. A ZooKeeper client will get various events from the ZooKeeper
  * server it connects to. An application using such a client handles these
  * events by registering a callback object with the client. The callback object
  * is expected to be an instance of a class that implements Watcher interface.
  *
  */
trait Watcher {
  /**
    * This trait defines the possible states an Event may represent
    */
  def process(event: WatchedEvent):Unit
}

object Watcher extends Watcher {
  object Event {
  /**
    * Enumeration of states the ZooKeeper may be at the event
    */
  sealed abstract class KeeperState(val value:Int) extends IntEnumEntry
  case object KeeperState extends IntEnum[KeeperState] {
    /** Unused, this state is never generated by the server */
    @Deprecated
    case object Unknown extends KeeperState(-1)
    /** The client is in the disconnected state - it is not connected
      * to any server in the ensemble. */
    case object Disconnected extends KeeperState(0)
    /** Unused, this state is never generated by the server */
    @Deprecated
    case object NoSyncConnected extends KeeperState(1)
    /** The client is in the connected state - it is connected
      * to a server in the ensemble (one of the servers specified
      * in the host connection parameter during ZooKeeper client
      * creation). */
    case object SyncConnected extends KeeperState(3)
    /**
      * Auth failed state
      */
    case object AuthFailed extends KeeperState(4)
    /**
      * The client is connected to a read-only server, that is the
      * server which is not currently connected to the majority.
      * The only operations allowed after receiving this state is
      * read operations.
      * This state is generated for read-only clients only since
      * read/write clients aren't allowed to connect to r/o servers.
      */
    case object ConnectedReadOnly extends KeeperState(5)
    /**
      * SaslAuthenticated: used to notify clients that they are SASL-authenticated,
      * so that they can perform Zookeeper actions with their SASL-authorized permissions.
      */
    case object SaslAuthenticated extends KeeperState(6)
    /** The serving cluster has expired this session. The ZooKeeper
      * client connection (the session) is no longer valid. You must
      * create a new client connection (instantiate a new ZooKeeper
      * instance) if you with to access the ensemble. */
    case object Expired extends KeeperState(-112)

    val values = findValues
  }
  /**
    * Enumeration of types of events that may occur on the ZooKeeper
    */
  sealed abstract class EventType(val value:Int) extends IntEnumEntry
  case object EventType extends IntEnum[EventType] {
    case object None extends EventType(-1)
    case object NodeCreated extends EventType(1)
    case object NodeDeleted extends EventType(2)
    case object NodeDataChanged extends EventType(3)
    case object NodeChildrenChanged extends EventType(4)
    case object DataWatchRemoved extends EventType(5)
    case object ChildWatchRemoved extends EventType(6)

    val values = findValues
  }
  /**
    * Enumeration of types of watchers
    */
  sealed abstract class WatcherType(val value:Int) extends IntEnumEntry
  case object WatcherType extends IntEnum[WatcherType] {
    case object Children extends WatcherType(1)
    case object Data extends WatcherType(2)
    case object Any extends WatcherType(3)

    val values = findValues
  }
}

  /**
    * This trait defines the possible states an Event may represent
    */
  override def process(event: WatchedEvent): Unit = ???
}