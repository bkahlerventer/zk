package zk.jute.compiler

import java.io.{File, FileWriter, IOException}


/**
  * Generate C code. This method only creates the requested file(s)
  * and spits-out file-level elements (such as include statements etc.)
  * record-level code is generated by JRecord.
  *
  * Creates a new instance of CGenerator
  *
  * @param name possibly full pathname to the file
  * @param ilist included files (as JFile)
  * @param rlist List of records defined within this file
  * @param outDir Output directory
  */
class CGenerator(name:String, ilist:List[JFile], rlist:List[JRecord], outDir:File) extends CodeGenerator {
  private val mName = new File(name).getName
  private val mInclFiles = ilist
  private val mRecList = rlist
  private final val outputDirectory = outDir



  def genCode():Unit = {
    if(!outputDirectory.exists() && !outputDirectory.mkdirs())
      throw new IOException(s"unable to create output directory $outputDirectory")

    try {
      val c:FileWriter = new FileWriter(new File(outputDirectory, s"$mName.c"))
      val h:FileWriter = new FileWriter(new File(outputDirectory, s"$mName.h"))

      h.write(Strings.license_notice)
      h.write(Strings.header_protection(mName, mInclFiles))
      h.write(Strings.includes(mInclFiles, ".h"))
      h.write(Strings.start_defs)

      c.write(Strings.license_notice)

      //for(i <- mRecList) i.genCCode(h, c)

      h.write(Strings.end_defs(mName))
    }
  }

  override def genGetSet(j: Jute, fIdx: Int): String = j match {
    case JBuffer(fname, _type, suffix, wrapper) =>
      """
        |
      """.stripMargin
  }

  override def genCompareTo(j: Jute): String = ???

  override def genEquals(j: Jute, peer: String): String = ???

  override def genHashCode(j: Jute): String = ???

  override def genReadWrapper(j: Jute, tag: String, decl: Boolean): String = ???

  override def genWriteWrapper(j: Jute, tag: String): String = ???

  override def genCompareToWrapper(j: Jute, other: String): String = ???

  override def genSlurpBytes(j: Jute, b: String, s: String, l: String): String = ???

  override def genCompareBytes(j: Jute): String = ???

  override def genDecl(j: Jute): String = ???

  override def genContructorParam(j: Jute): String = ???

  override def genConstructorSet(j: Jute): String = ???

  override def genWriteMethodName(j: Jute): String = ???

  override def genReadMethodName(j: Jute): String = ???
}
