package zk.jute.compiler

import java.io.{File, FileWriter, IOException}

/**
  * Generate C code. This method only creates the requested file(s)
  * and spits-out file-level elements (such as include statements etc.)
  * record-level code is generated by JRecord.
  *
  * Creates a new instance of CppGenerator
  *
  * @param name possibly full pathname to the file
  * @param ilist included files (as JFile)
  * @param rlist List of records defined within this file
  * @param outDir Output directory
  */
class CppGenerator(name:String, ilist:List[JFile], rlist:List[JRecord], outDir:File) {
  private val mName = new File(name).getName
  private val mInclFiles = ilist
  private val mRecList = rlist
  private final val outputDirectory = outDir

  def genCode(): Unit = {
    if (!outputDirectory.exists() && !outputDirectory.mkdirs())
      throw new IOException(s"unable to create output directory $outputDirectory")
    try {
      val cc: FileWriter = new FileWriter(new File(outputDirectory, s"$mName.cc"))
      val hh: FileWriter = new FileWriter(new File(outputDirectory, s"$mName.hh"))

      hh.write(Strings.license_notice)
      hh.write(Strings.header_protection(mName, mInclFiles))
      hh.write(Strings.includes(mInclFiles, ".hh"))

      cc.write(Strings.license_notice)

      for (i <- mRecList) i.genCppCode(hh, cc)


    }
  }
}
